mmp30_joint_publisher:
  type: "joint_state_controller/JointStateController"
  publish_rate: 50

gazebo_ros_control:
    pid_gains:
        front_left_wheel:
            p:100
            i:.01
            d:10.0
        front_right_wheel:
            p:100
            i:.01
            d:10.0
        rear_left_wheel:
            p:100
            i:.01
            d:10.0
        rear_right_wheel:
            p:100
            i:.01
            d:10.0        
            
                            
mmp30_velocity_controller:
  type: "diff_drive_controller/DiffDriveController"
  left_wheel: ['front_left_wheel', 'rear_left_wheel']
  right_wheel: ['front_right_wheel', 'rear_right_wheel']
  publish_rate: 50
  pose_covariance_diagonal: [0.001, 0.001, 0.001, 0.001, 0.001, 0.03]
  twist_covariance_diagonal: [0.001, 0.001, 0.001, 0.001, 0.001, 0.03]
  cmd_vel_timeout: 0.25

  # Base frame_id
  base_frame_id: base_link

  # Odometry fused with IMU is published by robot_localization, so
  # no need to publish a TF based on encoders alone.
  enable_odom_tf: false

  # mmp30 hardware provides wheel velocities
  estimate_velocity_from_position: false

  # Wheel separation and radius multipliers
  wheel_separation_multiplier: 2.0 # default: 1.0
  wheel_radius_multiplier    : 1.0 # default: 1.0

  # Velocity and acceleration limits
  # Whenever a min_* is unspecified, default to -max_*
  linear:
    x:
      has_velocity_limits    : true
      max_velocity           : 1.0   # m/s
      has_acceleration_limits: true
      max_acceleration       : 3.0   # m/s^2
  angular:
    z:
      has_velocity_limits    : true
      max_velocity           : 2.0   # rad/s
      has_acceleration_limits: true
      max_acceleration       : 6.0   # rad/s^2


hokuyo_position_controller:
  type: "position_controllers/JointPositionController"
  joint: "hokuyo_joint"
  pid: {p: 100.0, i: 0.01, d: 10.0}


nod_position_controller:
  type: "position_controllers/JointPositionController"
  joint: "nod_joint"
  pid: {p: 100.0, i: 0.01, d: 10.0}